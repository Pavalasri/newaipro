import React, { useState, useEffect } from 'react';
import { FileText, Download, Copy, CheckCircle, Clock, User, Tag } from 'lucide-react';
import { format } from 'date-fns';

export const MeetingMinutes: React.FC = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [transcript, setTranscript] = useState<string[]>([]);
  const [actionItems, setActionItems] = useState<Array<{
    id: string;
    task: string;
    assignee: string;
    priority: 'high' | 'medium' | 'low';
    deadline?: string;
  }>>([]);

  // Simulate real-time transcript updates
  useEffect(() => {
    const interval = setInterval(() => {
      const speakers = ['Sarah Chen', 'Raj Patel', 'Alex Johnson', 'You'];
      const sampleMessages = [
        'I think we should focus on the user experience improvements',
        'The API integration is almost complete, just need testing',
        'Can we schedule a follow-up meeting for next week?',
        'The budget allocation looks good for Q1',
        'We need to prioritize the mobile app features',
        'I agree with the proposed timeline',
        'Let me share the latest analytics data',
        'The stakeholder feedback has been positive'
      ];

      if (transcript.length < 10) {
        const speaker = speakers[Math.floor(Math.random() * speakers.length)];
        const message = sampleMessages[Math.floor(Math.random() * sampleMessages.length)];
        const timestamp = format(new Date(), 'HH:mm:ss');
        
        setTranscript(prev => [...prev, `[${timestamp}] ${speaker}: ${message}`]);
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [transcript.length]);

  // Simulate action item generation
  useEffect(() => {
    if (transcript.length >= 5 && actionItems.length === 0) {
      setActionItems([
        {
          id: '1',
          task: 'Complete API integration testing',
          assignee: 'Raj Patel',
          priority: 'high',
          deadline: '2025-01-25'
        },
        {
          id: '2',
          task: 'Prepare Q1 budget presentation',
          assignee: 'Sarah Chen',
          priority: 'medium',
          deadline: '2025-01-30'
        },
        {
          id: '3',
          task: 'Schedule stakeholder feedback session',
          assignee: 'Alex Johnson',
          priority: 'low',
          deadline: '2025-02-05'
        }
      ]);
    }
  }, [transcript.length, actionItems.length]);

  const generateSummary = () => {
    setIsGenerating(true);
    setTimeout(() => {
      setIsGenerating(false);
    }, 2000);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const exportMinutes = () => {
    const content = `
Meeting Minutes - ${format(new Date(), 'PPP')}

Participants:
- Sarah Chen
- Raj Patel  
- Alex Johnson
- You

Transcript:
${transcript.join('\n')}

Action Items:
${actionItems.map(item => `- ${item.task} (${item.assignee}) - ${item.priority} priority${item.deadline ? ` - Due: ${item.deadline}` : ''}`).join('\n')}

Generated by CollabAI - ${format(new Date(), 'PPpp')}
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `meeting-minutes-${format(new Date(), 'yyyy-MM-dd')}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="h-full overflow-y-auto">
      <div className="p-4 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-white flex items-center">
            <FileText className="w-5 h-5 mr-2 text-green-400" />
            Meeting Minutes
          </h3>
          <div className="flex items-center space-x-2">
            <button
              onClick={copyToClipboard.bind(null, transcript.join('\n'))}
              className="p-1 text-gray-400 hover:text-white transition-colors"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={exportMinutes}
              className="p-1 text-gray-400 hover:text-white transition-colors"
            >
              <Download className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      <div className="p-4 space-y-6">
        {/* Meeting Info */}
        <div className="bg-gray-900 p-3 rounded-lg">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-white">Meeting Started</span>
            <span className="text-sm text-green-400">{format(new Date(), 'HH:mm')}</span>
          </div>
          <div className="flex items-center text-xs text-gray-400">
            <Clock className="w-3 h-3 mr-1" />
            Duration: 23 minutes
          </div>
        </div>

        {/* Live Transcript */}
        <div>
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-white">Live Transcript</h4>
            <span className="text-xs text-gray-400 flex items-center">
              <div className="w-2 h-2 bg-red-500 rounded-full mr-2 animate-pulse"></div>
              Recording
            </span>
          </div>
          <div className="bg-gray-900 rounded-lg max-h-64 overflow-y-auto">
            {transcript.length === 0 ? (
              <div className="p-4 text-center text-gray-500">
                <Mic className="w-8 h-8 mx-auto mb-2 opacity-50" />
                <p className="text-sm">Waiting for conversation to start...</p>
              </div>
            ) : (
              <div className="p-3 space-y-2">
                {transcript.map((line, index) => (
                  <div key={index} className="text-xs text-gray-300 leading-relaxed">
                    {line}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* AI Summary */}
        <div>
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-white">AI Summary</h4>
            <button
              onClick={generateSummary}
              disabled={isGenerating || transcript.length < 3}
              className="text-xs bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-3 py-1 rounded transition-colors"
            >
              {isGenerating ? 'Generating...' : 'Generate'}
            </button>
          </div>
          <div className="bg-gray-900 p-3 rounded-lg">
            {isGenerating ? (
              <div className="flex items-center text-gray-400">
                <div className="animate-spin w-4 h-4 border-2 border-blue-400 border-t-transparent rounded-full mr-2"></div>
                <span className="text-sm">AI is analyzing the conversation...</span>
              </div>
            ) : transcript.length >= 3 ? (
              <div className="text-sm text-gray-300">
                <p className="mb-2"><strong>Key Topics:</strong> API integration, user experience improvements, budget planning</p>
                <p className="mb-2"><strong>Decisions Made:</strong> Proceeding with Q1 timeline, prioritizing mobile features</p>
                <p><strong>Next Steps:</strong> Testing phase completion, stakeholder presentation preparation</p>
              </div>
            ) : (
              <p className="text-sm text-gray-500">Summary will be generated once sufficient conversation is recorded</p>
            )}
          </div>
        </div>

        {/* Action Items */}
        <div>
          <h4 className="text-sm font-medium text-white mb-3 flex items-center">
            <CheckCircle className="w-4 h-4 mr-2 text-green-400" />
            Action Items ({actionItems.length})
          </h4>
          <div className="space-y-2">
            {actionItems.length === 0 ? (
              <div className="bg-gray-900 p-3 rounded-lg text-center">
                <p className="text-sm text-gray-500">Action items will appear automatically as they're mentioned</p>
              </div>
            ) : (
              actionItems.map((item) => (
                <div key={item.id} className="bg-gray-900 p-3 rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <p className="text-sm text-white font-medium">{item.task}</p>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      item.priority === 'high' ? 'bg-red-600/20 text-red-400' :
                      item.priority === 'medium' ? 'bg-yellow-600/20 text-yellow-400' :
                      'bg-blue-600/20 text-blue-400'
                    }`}>
                      {item.priority}
                    </span>
                  </div>
                  <div className="flex items-center text-xs text-gray-400 space-x-4">
                    <div className="flex items-center">
                      <User className="w-3 h-3 mr-1" />
                      {item.assignee}
                    </div>
                    {item.deadline && (
                      <div className="flex items-center">
                        <Clock className="w-3 h-3 mr-1" />
                        Due: {format(new Date(item.deadline), 'MMM dd')}
                      </div>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Key Insights */}
        <div className="bg-blue-900/30 border border-blue-600/30 p-3 rounded-lg">
          <h4 className="text-sm font-medium text-blue-400 mb-2 flex items-center">
            <Tag className="w-4 h-4 mr-2" />
            Key Insights
          </h4>
          <ul className="text-xs text-gray-300 space-y-1">
            <li>• Meeting is on track with agenda</li>
            <li>• High participation from all attendees</li>
            <li>• 3 action items identified so far</li>
            <li>• Positive sentiment detected</li>
          </ul>
        </div>
      </div>
    </div>
  );
};
